--- a/Loader/PhpFileLoader.php
+++ b/Loader/PhpFileLoader.php
@@ -64,7 +64,11 @@ class PhpFileLoader extends FileLoader
             $callback = $load($path, $this->env);

             if (\is_object($callback) && \is_callable($callback)) {
-                $this->executeCallback($callback, new ContainerConfigurator($this->container, $this, $this->instanceof, $path, $resource, $this->env), $path);
+                // generic solution
+                $reflectionFunction = new \ReflectionFunction($callback);
+                $containerConfiguratorClass = $reflectionFunction->getParameters()[0]->getType()->getName();
+
+                $this->executeCallback($callback, new $containerConfiguratorClass($this->container, $this, $this->instanceof, $path, $resource, $this->env), $path);
             }
         } finally {
             $this->instanceof = [];
@@ -118,25 +122,26 @@ class PhpFileLoader extends FileLoader
             }
             $type = $reflectionType->getName();

-            switch ($type) {
-                case ContainerConfigurator::class:
-                    $arguments[] = $containerConfigurator;
-                    break;
-                case ContainerBuilder::class:
-                    $arguments[] = $this->container;
-                    break;
-                case FileLoader::class:
-                case self::class:
-                    $arguments[] = $this;
-                    break;
-                default:
-                    try {
-                        $configBuilder = $this->configBuilder($type);
-                    } catch (InvalidArgumentException|\LogicException $e) {
-                        throw new \InvalidArgumentException(sprintf('Could not resolve argument "%s" for "%s".', $type.' $'.$parameter->getName(), $path), 0, $e);
-                    }
-                    $configBuilders[] = $configBuilder;
-                    $arguments[] = $configBuilder;
+            if (is_a($type, ContainerConfigurator::class, true)) {
+                $arguments[] = $containerConfigurator;
+            } else {
+                switch ($type) {
+                    case ContainerBuilder::class:
+                        $arguments[] = $this->container;
+                        break;
+                    case FileLoader::class:
+                    case self::class:
+                        $arguments[] = $this;
+                        break;
+                    default:
+                        try {
+                            $configBuilder = $this->configBuilder($type);
+                        } catch (InvalidArgumentException|\LogicException $e) {
+                            throw new \InvalidArgumentException(sprintf('Could not resolve argument "%s" for "%s".', $type.' $'.$parameter->getName(), $path), 0, $e);
+                        }
+                        $configBuilders[] = $configBuilder;
+                        $arguments[] = $configBuilder;
+                }
             }
         }
